{\rtf1\ansi\ansicpg932\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset128 HiraginoSans-W3;}
{\colortbl;\red255\green255\blue255;\red251\green0\blue7;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c100000\c12195\c0;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 This is a library that adds multiple logic gates to Python. Note\
I will explain the types.\
NAND gate: This is a gate that combines AND and NOT. Originally, in AND, the place of True becomes False.\
NOR Gate: This is a logic gate that combines OR and NOT. Originally, in OR, True becomes False.\
HNAND: This is a logic gate that I made myself. Abbreviation for HirfNotAND gate. One input is inverted. In other words, only True|False returns True. \cf2 When mode is set to 1, it becomes a logic gate that returns True only when False|True is the opposite.\
\cf0 XOR: This returns True only if only one is True. Both True and both False are not allowed.\
HNXOR: This is the XOR version of HNAND that I explained earlier. There is nothing further to explain.\
XNOR: This is a gate that combines XOR and NOT. Just use XOR to return True and set it to False.\
\

\f1 \'82\'b1\'82\'ea\'82\'cdPython\'82\'c9\'95\'a1\'90\'94\'82\'cc\'98\'5f\'97\'9d\'83\'51\'81\'5b\'83\'67\'82\'f0\'92\'c7\'89\'c1\'82\'b7\'82\'e9\'83\'89\'83\'43\'83\'75\'83\'89\'83\'8a\'82\'c5\'82\'b7\'81\'42\
\'8e\'ed\'97\'de\'82\'f0\'90\'e0\'96\'be\'82\'b5\'82\'dc\'82\'b7\
NAND\'83\'51\'81\'5b\'83\'67\'81\'46AND\'82\'c6NOT\'82\'f0\'97\'5a\'8d\'87\'82\'b3\'82\'b9\'82\'bd\'98\'5f\'97\'9d\'83\'51\'81\'5b\'83\'67\'82\'c5\'82\'b7\'81\'42\'96\'7b\'97\'88AND\'82\'c5\'82\'cdTrue\'82\'c9\'82\'c8\'82\'e9\'82\'c6\'82\'b1\'82\'eb\'82\'aaFalse\'82\'c9\'82\'c8\'82\'e8\'82\'dc\'82\'b7\'81\'42\
NOR\'83\'51\'81\'5b\'83\'67\'81\'46OR\'82\'c6NOT\'82\'f0\'97\'5a\'8d\'87\'82\'b3\'82\'b9\'82\'bd\'98\'5f\'97\'9d\'83\'51\'81\'5b\'83\'67\'82\'c5\'82\'b7\'81\'42\'96\'7b\'97\'88OR\'82\'c5\'82\'cdTrue\'82\'c9\'82\'c8\'82\'e9\'82\'c6\'82\'b1\'82\'eb\'82\'aaFalse\'82\'c9\'82\'c8\'82\'e8\'82\'dc\'82\'b7\'81\'42\
HNAND\'81\'46\'82\'b1\'82\'ea\'82\'cd\'8e\'84\'82\'aa\'8d\'ec\'82\'c1\'82\'bd\'98\'5f\'97\'9d\'83\'51\'81\'5b\'83\'67\'82\'c5\'82\'b7\'81\'42HirfNotAND\'83\'51\'81\'5b\'83\'67\'82\'cc\'8f\'c8\'97\'aa\'82\'c5\'82\'b7\'81\'42\'95\'d0\'95\'fb\'82\'cc\'93\'fc\'97\'cd\'82\'aa\'94\'bd\'93\'5d\'82\'b3\'82\'ea\'82\'bdAND\'83\'51\'81\'5b\'83\'67\'82\'c5\'82\'b7\'81\'42\'82\'c2\'82\'dc\'82\'e8True|False\'82\'cc\'8f\'ea\'8d\'87\'82\'cc\'82\'dd\'82\'aaTrue\'82\'f0\'95\'d4\'82\'b5\'82\'dc\'82\'b7\'81\'42\cf2 mode\'82\'f01\'82\'c9\'82\'b7\'82\'e9\'82\'c6False|True\'82\'cc\'82\'ddTrue\'82\'f0\'95\'d4\'82\'b7\'82\'e6\'82\'a4\'82\'c9\'82\'c8\'82\'e8\'82\'dc\'82\'b7\'81\'42\
\cf3 XOR\'83\'51\'81\'5b\'83\'67\'81\'461\'82\'c2\'82\'be\'82\'af\'82\'aaTrue\'82\'cc\'8f\'ea\'8d\'87\'82\'c9\'82\'cc\'82\'ddTrue\'82\'f0\'95\'d4\'82\'b5\'82\'dc\'82\'b7\'81\'42\'97\'bc\'95\'fbTrue\'82\'dc\'82\'bd\'82\'cd\'97\'bc\'95\'fbFalse\'82\'c8\'82\'e7False\'82\'c9\'82\'c8\'82\'e8\'82\'dc\'82\'b7\'81\'42\
HNXOR\'81\'46\'82\'b1\'82\'ea\'82\'cd\'91\'4f\'82\'c9\'90\'e0\'96\'be\'82\'b5\'82\'bdHNAND\'82\'ccXOR\'94\'c5\'82\'c5\'82\'b7\'81\'42\'82\'b1\'82\'ea\'88\'c8\'8f\'e3\'90\'e0\'96\'be\'82\'b7\'82\'e9\'82\'b1\'82\'c6\'82\'cd\'82\'a0\'82\'e8\'82\'dc\'82\'b9\'82\'f1\'81\'42\
XNOR\'81\'46XOR\'82\'c6NOT\'82\'f0\'91\'67\'82\'dd\'8d\'87\'82\'ed\'82\'b9\'82\'bd\'83\'51\'81\'5b\'83\'67\'82\'c5\'82\'b7\'81\'42\'96\'7b\'97\'88XOR\cf0 \'82\'c5\'82\'cdTrue\'82\'c9\'82\'c8\'82\'e9\'82\'c6\'82\'b1\'82\'eb\'82\'aaFalse\'82\'c9\'82\'c8\'82\'e8\'82\'dc\'82\'b7\'81\'42\
\cf3 \
}# pythonLogicGates
# pythonLogicGates
